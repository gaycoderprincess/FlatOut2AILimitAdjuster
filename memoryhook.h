void WriteLog(const std::string& str) {
	static auto file = std::ofstream("FlatOut2AILimitAdjuster_gcp.log");

	file << str;
	file << "\n";
	file.flush();
}

bool IsReturnAddressBlocked(uintptr_t addr) {
	if (addr == 0x6035FD) return true; // realloc
	return false;
}

auto mallocHooked_call = (void*(__cdecl*)(size_t, int))0x6035A2;
void* __cdecl mallocHooked(size_t a1) {
	if (a1 <= 0 || a1 >= 0x7FFFFFFF) return nullptr;
	if (auto data = mallocHooked_call(a1, *(int*)0x6A30BC)) {
		auto retAddr = (uintptr_t)__builtin_extract_return_addr(__builtin_return_address(0));
		if (!IsReturnAddressBlocked(retAddr)) WriteLog(std::format("Memory allocated at 0x{:X} size {} by 0x{:X}", (uintptr_t)data, a1, retAddr));
		memset(data, 0, a1);
		return data;
	}
	return nullptr;
}

auto reallocHooked_call = (void*(__cdecl*)(void*, size_t))0x6035E0;
void* __cdecl reallocHooked(void* a1, size_t a2) {
	if (auto data = reallocHooked_call(a1, a2)) {
		WriteLog(std::format("Memory reallocated at 0x{:X} size {} by 0x{:X}", (uintptr_t)data, a2, (uintptr_t)__builtin_extract_return_addr(__builtin_return_address(0))));
		if (a1) WriteLog(std::format("Memory freed at 0x{:X} by 0x{:X}", (uintptr_t)a1, (uintptr_t)__builtin_extract_return_addr(__builtin_return_address(0))));
		return data;
	}
	return nullptr;
}

auto freeHooked_call = (void(__cdecl*)(void*))0x6023ED;
void __cdecl freeHooked(void* a1) {
	freeHooked_call(a1);
	if (a1) WriteLog(std::format("Memory freed at 0x{:X} by 0x{:X}", (uintptr_t)a1, (uintptr_t)__builtin_extract_return_addr(__builtin_return_address(0))));
}

void PlaceMemoryHooks() {
	NyaHookLib::PatchRelative(NyaHookLib::JMP, 0x6035CE, &mallocHooked);

	// 15332410 got overwritten, created by 0x47D457

	// 1536FBD0 got overwritten, created by 0x59A1E5
	// there are nearby allocations:
	// Memory allocated at 0x1536F838 size 1024 by 0x55F689 - texture load
	// Memory allocated at 0x1536F838 size 912 by 0x599530 - skybox related?
	// Memory allocated at 0x1536EE30 size 2560 by 0x49181C

	// 0x15379978+1B0 got overwritten, created by 0x59A1C9

	// 1538F150+1B0 got overwritten, created by 0x59A1E5, log line 15504

	uintptr_t freeAddresses[] = {
			0x4012AC,
			0x4012D1,
			0x401302,
			0x4016C2,
			0x4016DD,
			0x40240F,
			0x402834,
			0x408B16,
			0x40D008,
			0x40D011,
			0x40D02D,
			0x40D036,
			0x40D052,
			0x40D05B,
			0x40D071,
			0x40D0A0,
			0x40D0DE,
			0x40DA0A,
			0x41631A,
			0x416360,
			0x4163AE,
			0x4163E8,
			0x4163FD,
			0x41640B,
			0x416417,
			0x41DE34,
			0x41F639,
			0x41F64B,
			0x42101D,
			0x428390,
			0x428530,
			0x42E7B3,
			0x42E7FD,
			0x42E80C,
			0x42E89E,
			0x42E8F0,
			0x42E949,
			0x42E99B,
			0x42EA25,
			0x42EA5D,
			0x42EA75,
			0x42EA84,
			0x42EA90,
			0x42EA9C,
			0x42EAA8,
			0x42EAB4,
			0x42EAC6,
			0x42EAD8,
			0x42EAEA,
			0x42EC63,
			0x42EC75,
			0x42EC87,
			0x42EC99,
			0x42ECD3,
			0x42ED4D,
			0x42ED5F,
			0x42ED6B,
			0x42ED7D,
			0x42ED89,
			0x42ED95,
			0x42EF48,
			0x42EF5A,
			0x42EF77,
			0x42EFDE,
			0x42FB20,
			0x434A69,
			0x434A80,
			0x43BAC6,
			0x43F0A3,
			0x43F0AC,
			0x43F0B2,
			0x43F0C4,
			0x440321,
			0x449007,
			0x449013,
			0x44901F,
			0x44902B,
			0x449037,
			0x449043,
			0x44904F,
			0x44905B,
			0x449067,
			0x449073,
			0x44907F,
			0x44908B,
			0x449097,
			0x4490A3,
			0x4490AF,
			0x4490BB,
			0x4490CA,
			0x4490D6,
			0x4490E2,
			0x4490EE,
			0x4490FA,
			0x449106,
			0x449112,
			0x44911E,
			0x44912A,
			0x449136,
			0x449142,
			0x44914E,
			0x44915A,
			0x449166,
			0x449172,
			0x44917E,
			0x44918D,
			0x449199,
			0x4491A5,
			0x4491B1,
			0x4491BD,
			0x4491C9,
			0x4491D2,
			0x4491DB,
			0x4491E4,
			0x4491ED,
			0x4491F6,
			0x4491FF,
			0x449208,
			0x449211,
			0x449DD7,
			0x449DE3,
			0x449DEF,
			0x449DFB,
			0x449E07,
			0x449E13,
			0x449E1F,
			0x449E2B,
			0x449E37,
			0x449E43,
			0x449E4F,
			0x449E5B,
			0x449E67,
			0x449E73,
			0x449E7F,
			0x449E8B,
			0x449E9A,
			0x449EA6,
			0x449EB2,
			0x449EBE,
			0x449ECA,
			0x449ED6,
			0x449EE2,
			0x449EEE,
			0x449EFA,
			0x449F06,
			0x449F12,
			0x449F1E,
			0x449F2A,
			0x449F36,
			0x449F42,
			0x449F4E,
			0x449F5D,
			0x449F69,
			0x449F75,
			0x449F81,
			0x449F8D,
			0x449F99,
			0x449FA5,
			0x449FB1,
			0x449FBD,
			0x449FC9,
			0x449FD5,
			0x449FE1,
			0x449FED,
			0x449FF9,
			0x44A005,
			0x44A011,
			0x44A020,
			0x44A02C,
			0x44A038,
			0x44A044,
			0x44A050,
			0x44A05C,
			0x44A068,
			0x44A074,
			0x44A080,
			0x44A08C,
			0x44A098,
			0x44A0A4,
			0x44A0B0,
			0x44A0BC,
			0x44A0C8,
			0x44A0D4,
			0x44A0E3,
			0x44A0EF,
			0x44A0FB,
			0x44A107,
			0x44A113,
			0x44A11F,
			0x44A12B,
			0x44A137,
			0x44A143,
			0x44A14F,
			0x44A15B,
			0x44A167,
			0x44A173,
			0x44A17F,
			0x44A18B,
			0x44A197,
			0x44A1A6,
			0x44A1B2,
			0x44A1BE,
			0x44A1CA,
			0x44A1D6,
			0x44A1E2,
			0x44A1EB,
			0x44A1F4,
			0x44B738,
			0x44B820,
			0x44B828,
			0x44B831,
			0x44B83A,
			0x44B843,
			0x44B84C,
			0x44B858,
			0x44B864,
			0x44B870,
			0x44B87C,
			0x44B888,
			0x44B894,
			0x44B8A0,
			0x44B8AC,
			0x44B8B8,
			0x44B8C4,
			0x44B8DA,
			0x44B903,
			0x44B92A,
			0x44B936,
			0x44B942,
			0x44B94E,
			0x44B95A,
			0x44B966,
			0x44B96F,
			0x44B978,
			0x44C44D,
			0x44C455,
			0x44C45E,
			0x44C467,
			0x44C470,
			0x44C479,
			0x44C485,
			0x44C491,
			0x44C4A3,
			0x44C4C0,
			0x44C818,
			0x44D927,
			0x450A8B,
			0x4513C3,
			0x451413,
			0x451422,
			0x451457,
			0x4516AA,
			0x4516C0,
			0x4516D7,
			0x452FA0,
			0x457080,
			0x457BB1,
			0x457CC8,
			0x457CDE,
			0x457CF9,
			0x4589F0,
			0x459F31,
			0x459F60,
			0x459FCA,
			0x45A009,
			0x45A024,
			0x45A044,
			0x45A050,
			0x45A062,
			0x45A074,
			0x45CC13,
			0x45D505,
			0x45D70A,
			0x45D710,
			0x45D743,
			0x45D7F1,
			0x46037F,
			0x462907,
			0x462BA1,
			0x467071,
			0x46708F,
			0x4670BA,
			0x4670CC,
			0x4670D8,
			0x468B51,
			0x468C81,
			0x46A4D0,
			0x46A4FE,
			0x46A57C,
			0x46B842,
			0x46B892,
			0x47048B,
			0x4706C0,
			0x47074C,
			0x470800,
			0x470809,
			0x476E70,
			0x476EBF,
			0x476ED1,
			0x476F08,
			0x476F6F,
			0x476F8C,
			0x476FA4,
			0x476FB6,
			0x477BA1,
			0x4787F3,
			0x478DFA,
			0x478E12,
			0x478E23,
			0x478E2F,
			0x479D00,
			0x479D66,
			0x47D436,
			0x47DA00,
			0x47DED1,
			0x47E0D1,
			0x4837B4,
			0x4837D3,
			0x4837EA,
			0x48C601,
			0x48C6E6,
			0x48CAC0,
			0x48CB37,
			0x48CB7E,
			0x48CB95,
			0x48D219,
			0x48DF31,
			0x48E016,
			0x48E287,
			0x48E2A8,
			0x48F4F2,
			0x4905E3,
			0x4922C1,
			0x4922D3,
			0x4922F4,
			0x49232E,
			0x4923A2,
			0x4923EF,
			0x49242A,
			0x4924A9,
			0x492782,
			0x492882,
			0x4939E2,
			0x4955B1,
			0x496426,
			0x496A01,
			0x49B300,
			0x49C281,
			0x4A3AB2,
			0x4A3B9C,
			0x4A3BB4,
			0x4A40DF,
			0x4A4396,
			0x4A43AB,
			0x4A43DA,
			0x4A43F0,
			0x4A62CC,
			0x4A62DE,
			0x4A62F6,
			0x4A77E1,
			0x4A77FA,
			0x4A784E,
			0x4A789A,
			0x4A78A6,
			0x4A78AC,
			0x4A78DB,
			0x4A78E7,
			0x4A78ED,
			0x4A84E2,
			0x4A84EE,
			0x4A9E18,
			0x4A9F70,
			0x4AA306,
			0x4AA5A8,
			0x4AC2E5,
			0x4AC330,
			0x4AC34E,
			0x4ADDD0,
			0x4ADDE2,
			0x4ADE6E,
			0x4ADE80,
			0x4AEE50,
			0x4AEE98,
			0x4AEEA4,
			0x4AEF38,
			0x4AEF77,
			0x4AEF9C,
			0x4AF9FA,
			0x4B06D1,
			0x4B2330,
			0x4B3211,
			0x4B3253,
			0x4B3295,
			0x4B32D7,
			0x4B3319,
			0x4B335B,
			0x4B339D,
			0x4B33DF,
			0x4B3421,
			0x4B3CDA,
			0x4B3CED,
			0x4B3D04,
			0x4B6427,
			0x4B6436,
			0x4B6442,
			0x4B644B,
			0x4B6453,
			0x4B647D,
			0x4B6489,
			0x4B648F,
			0x4B64E4,
			0x4C1B4F,
			0x4C1B5B,
			0x4C1B64,
			0x4C1B6D,
			0x4C7246,
			0x4C728A,
			0x4C74E9,
			0x4C759C,
			0x4C77B8,
			0x4C786C,
			0x4C7878,
			0x4C7924,
			0x4C7972,
			0x4C910A,
			0x4C9290,
			0x4C92A6,
			0x4C98E6,
			0x4C991A,
			0x4C9941,
			0x4C9951,
			0x4CC166,
			0x4CC48A,
			0x4CE261,
			0x4CE281,
			0x4CE560,
			0x4CE7B0,
			0x4CE880,
			0x4CE9D0,
			0x4CEB40,
			0x4CEC60,
			0x4CEDD0,
			0x4CEF40,
			0x4CF030,
			0x4CF230,
			0x4CF250,
			0x4D155E,
			0x4D167E,
			0x4D179E,
			0x4D18DF,
			0x4D18EB,
			0x4D18F6,
			0x4D1C9F,
			0x4D1CAB,
			0x4D1CB6,
			0x4D2CBE,
			0x4D2D3E,
			0x4D2DBE,
			0x4D2E3E,
			0x4D2EBE,
			0x4D2F3E,
			0x4D2FBE,
			0x4D303E,
			0x4D3090,
			0x4D30B0,
			0x4D35FF,
			0x4D3785,
			0x4D6625,
			0x4D66BE,
			0x4D6890,
			0x4D6964,
			0x4D6991,
			0x4D699A,
			0x4D69A3,
			0x4D69AC,
			0x4D6A98,
			0x4D97F0,
			0x4D9814,
			0x4D9D61,
			0x4D9EB0,
			0x4D9EE8,
			0x4D9F41,
			0x4D9F62,
			0x4DBB90,
			0x4DBC49,
			0x4DC981,
			0x4DCDA0,
			0x4DCDA6,
			0x4DCEEF,
			0x4DCEF5,
			0x4DE4A0,
			0x4DE57E,
			0x4DE58A,
			0x4E0965,
			0x4E1151,
			0x4E2080,
			0x4E29A1,
			0x4E2CC0,
			0x4E2D03,
			0x4E356A,
			0x4E3682,
			0x4E43F0,
			0x4E4410,
			0x4E4430,
			0x4E4450,
			0x4E4470,
			0x4E44B4,
			0x4E44CD,
			0x4E45E4,
			0x4E46C4,
			0x4E46D4,
			0x4E46F4,
			0x4E4704,
			0x4E4724,
			0x4E4734,
			0x4E4754,
			0x4E4764,
			0x4E4784,
			0x4E4794,
			0x4E47B4,
			0x4E47C4,
			0x4E59CA,
			0x4E59DB,
			0x4E5A0A,
			0x4E5A1B,
			0x4E5A4A,
			0x4E5A5B,
			0x4E5A8A,
			0x4E5A9B,
			0x4E5ACA,
			0x4E5ADB,
			0x4E5B35,
			0x4EACE3,
			0x4EACEC,
			0x4EAD60,
			0x4EBFD0,
			0x4EC121,
			0x4ECA40,
			0x4ED571,
			0x4ED591,
			0x4ED916,
			0x4F448E,
			0x4F44B1,
			0x4F4500,
			0x4F453E,
			0x4F4560,
			0x4F6E15,
			0x4F6E71,
			0x4F6EAE,
			0x4F7FC0,
			0x4F8040,
			0x4F80C0,
			0x4F8140,
			0x4FA0B0,
			0x4FA130,
			0x4FC882,
			0x4FC8F5,
			0x4FC9C0,
			0x4FCA46,
			0x4FCA74,
			0x4FCA87,
			0x4FCA9A,
			0x4FCAC0,
			0x4FCAE4,
			0x4FCB14,
			0x4FCB2B,
			0x4FCCA1,
			0x4FCCB5,
			0x4FE2BD,
			0x4FE2D4,
			0x4FE70D,
			0x4FE752,
			0x4FF6F5,
			0x4FF7AD,
			0x4FF7B6,
			0x4FF7CD,
			0x5005B0,
			0x5011B0,
			0x50121B,
			0x501240,
			0x501249,
			0x501E9E,
			0x5021DE,
			0x5021EA,
			0x502B0D,
			0x502B2D,
			0x504650,
			0x505C52,
			0x509210,
			0x50B150,
			0x50C7D6,
			0x50DDD0,
			0x50E145,
			0x50E2E0,
			0x50F665,
			0x510070,
			0x5104D5,
			0x510AC0,
			0x510BA6,
			0x510D20,
			0x511FB3,
			0x512787,
			0x512796,
			0x512849,
			0x516AA5,
			0x516B90,
			0x516F16,
			0x517070,
			0x51B921,
			0x51B9E7,
			0x51BD30,
			0x51BF9D,
			0x51C020,
			0x51C066,
			0x51C311,
			0x51C330,
			0x51C388,
			0x51C3F9,
			0x51C484,
			0x51C5CE,
			0x51CE00,
			0x51CECA,
			0x51CF65,
			0x51D0E1,
			0x51D18E,
			0x51D1A1,
			0x51D1B7,
			0x51D1DB,
			0x51D1EE,
			0x51D256,
			0x51D306,
			0x51D381,
			0x51D570,
			0x51D5AB,
			0x51D79B,
			0x51D7AE,
			0x51D7CC,
			0x51D7FB,
			0x51D80E,
			0x51D977,
			0x51D98B,
			0x51DC3C,
			0x51DCDB,
			0x51DD69,
			0x51DF97,
			0x51DFA6,
			0x51E1C4,
			0x51E29D,
			0x51E2CC,
			0x51E2E9,
			0x51E53D,
			0x51E54E,
			0x51E7B9,
			0x51FD3F,
			0x51FD9F,
			0x51FDD4,
			0x51FE45,
			0x51FE79,
			0x52065D,
			0x520805,
			0x520819,
			0x5208DE,
			0x5208F2,
			0x5210C4,
			0x5210CA,
			0x52124D,
			0x521280,
			0x5212B4,
			0x5212FF,
			0x52132D,
			0x52141E,
			0x5217B9,
			0x5217D4,
			0x521FB3,
			0x521FE0,
			0x5228D1,
			0x522930,
			0x522C97,
			0x522CC6,
			0x522CF0,
			0x522F3C,
			0x522F52,
			0x52315D,
			0x5231A4,
			0x523206,
			0x52323D,
			0x523353,
			0x523423,
			0x523441,
			0x524D39,
			0x524D56,
			0x524DB1,
			0x525541,
			0x525A50,
			0x526440,
			0x52B8B0,
			0x531D20,
			0x531D41,
			0x53277C,
			0x5327A4,
			0x532DF0,
			0x5331ED,
			0x534A73,
			0x534ABF,
			0x534B0B,
			0x536E38,
			0x536F42,
			0x537067,
			0x537352,
			0x5377D8,
			0x537867,
			0x5378D4,
			0x538660,
			0x5386CC,
			0x5386FE,
			0x5387A4,
			0x5387C1,
			0x5387ED,
			0x53886B,
			0x538879,
			0x538893,
			0x5388A1,
			0x538A29,
			0x538A32,
			0x538A3B,
			0x5394B8,
			0x53AC91,
			0x53B5D1,
			0x53B700,
			0x53B870,
			0x53BB4D,
			0x53DFD1,
			0x53E189,
			0x53E7D0,
			0x53E8D1,
			0x53EC11,
			0x53EDAB,
			0x53F356,
			0x53F663,
			0x5400A0,
			0x54030D,
			0x540CB0,
			0x540EE9,
			0x541870,
			0x541AC9,
			0x543190,
			0x543629,
			0x543BC0,
			0x543E90,
			0x543ED8,
			0x543EFD,
			0x54527C,
			0x545CE0,
			0x545F23,
			0x546330,
			0x546580,
			0x5465C6,
			0x546618,
			0x547300,
			0x5474C6,
			0x547B70,
			0x547DB3,
			0x5483A0,
			0x548640,
			0x549C70,
			0x549EE6,
			0x54A1D0,
			0x54A409,
			0x54BFD0,
			0x54C2F9,
			0x54C324,
			0x54C348,
			0x54C908,
			0x54C94A,
			0x54C981,
			0x54CC70,
			0x54CD11,
			0x54CEA1,
			0x54D459,
			0x54E79B,
			0x54E7AB,
			0x54E80C,
			0x54FEA0,
			0x550035,
			0x55016D,
			0x55068F,
			0x550698,
			0x5506B8,
			0x551B36,
			0x551D00,
			0x551D09,
			0x552141,
			0x55214A,
			0x552150,
			0x552198,
			0x5521A1,
			0x5521A7,
			0x552260,
			0x5522AF,
			0x55232F,
			0x552338,
			0x5527A9,
			0x5527B2,
			0x5527B8,
			0x552802,
			0x55280B,
			0x552811,
			0x552B81,
			0x553B83,
			0x553C4F,
			0x553C67,
			0x559607,
			0x5598C7,
			0x5598CD,
			0x5598F9,
			0x559905,
			0x559910,
			0x55A18C,
			0x55A7BC,
			0x55AF53,
			0x55AF79,
			0x55AFB3,
			0x55B191,
			0x55D195,
			0x55EBE1,
			0x55EBEA,
			0x55EC6C,
			0x55ECEB,
			0x55ED3F,
			0x55EDCA,
			0x55EE50,
			0x55EF21,
			0x55EF6D,
			0x55EFE7,
			0x55FE8D,
			0x55FE96,
			0x5601E1,
			0x5603C0,
			0x5603E4,
			0x5603F6,
			0x565B9D,
			0x565BC3,
			0x565BCF,
			0x565BDB,
			0x565BF5,
			0x56D4F4,
			0x575B30,
			0x575C0A,
			0x575CD6,
			0x575D6E,
			0x575D77,
			0x575D7D,
			0x575D94,
			0x575DAC,
			0x575DC4,
			0x575DDA,
			0x575DF0,
			0x578B26,
			0x578B2F,
			0x579081,
			0x57908A,
			0x579090,
			0x57909D,
			0x5790A6,
			0x5790AC,
			0x5790B9,
			0x5790C2,
			0x5790C8,
			0x579290,
			0x579299,
			0x579331,
			0x57933A,
			0x579340,
			0x57AD44,
			0x57AD6A,
			0x57AD8E,
			0x57B18F,
			0x57B1C6,
			0x57B350,
			0x57B3F1,
			0x57B41C,
			0x57B43E,
			0x57B460,
			0x57B482,
			0x57B491,
			0x57BAD1,
			0x57BAF2,
			0x57BB8A,
			0x57BB93,
			0x57BBB4,
			0x57CAF5,
			0x58ACF0,
			0x58AD11,
			0x58AD1D,
			0x58AD29,
			0x58AD35,
			0x58AD41,
			0x58AD57,
			0x58AD66,
			0x58AD79,
			0x58CAE1,
			0x58E502,
			0x58E519,
			0x58E537,
			0x58E54B,
			0x58E5FA,
			0x58E622,
			0x58E6D3,
			0x58E6F2,
			0x58F403,
			0x58F415,
			0x58F427,
			0x58F45D,
			0x58F47C,
			0x590FB9,
			0x593D3B,
			0x593D5F,
			0x5944BF,
			0x594A7E,
			0x594BCC,
			0x596095,
			0x5985B1,
			0x598791,
			0x598C82,
			0x598C9D,
			0x599022,
			0x59903D,
			0x599A4F,
			0x599A65,
			0x599A8A,
			0x599AAF,
			0x599AC5,
			0x599AEA,
			0x599B0F,
			0x599B25,
			0x599B3B,
			0x599B51,
			0x599B67,
			0x599BD8,
			0x599C18,
			0x599CD6,
			0x599CF9,
			0x599D05,
			0x599D11,
			0x599D1D,
			0x599D29,
			0x599D35,
			0x599D41,
			0x599D4D,
			0x599D59,
			0x59BC60,
			0x59CB87,
			0x59CBB7,
			0x59CD80,
			0x59CDCF,
			0x5A2CC6,
			0x5A31F7,
			0x5A3573,
			0x5A3B10,
			0x5A41DA,
			0x5A41E3,
			0x5A41EC,
			0x5A55F0,
			0x5A5617,
			0x5A5666,
			0x5A567D,
			0x5A5693,
			0x5A56B3,
			0x5A56F6,
			0x5A60DF,
			0x5A748F,
			0x5A9F94,
			0x5A9F9D,
			0x5A9FA3,
			0x5AA054,
			0x5AA05D,
			0x5AA063,
			0x5AB2BE,
			0x5AC505,
			0x5AD670,
			0x5AE394,
			0x5AF2D0,
			0x5AF2D9,
			0x5AF2DF,
			0x5B05D0,
			0x5B0624,
			0x5B08E1,
			0x5B0BB0,
			0x5B0E10,
			0x5B1026,
			0x5B13F6,
			0x5B15F6,
			0x5B18C6,
			//0x5E410C,
			0x5F7A23,
			0x5F9275,
			0x601E66,
			0x602505,
			0x6025B5,
			0x60360B,
			0x604251,
			0x6050DE,
			0x6050EC,
			0x605222,
			0x60524C,
			0x605406,
			0x605418,
			0x60541E,
			0x6054E6,
			0x60558A,
			0x6055B1,
			0x605641,
			0x605664,
			0x605676,
			0x60567E,
			0x605699,
			0x6056A7,
			0x6056CE,
			0x6056D6,
			0x6059D4,
			0x605D89,
			0x605DB8,
			0x605F8B,
			0x6060E1,
			0x606E7A,
			0x6073E9,
			0x6073F7,
			0x607405,
			0x607413,
			0x607421,
			0x60742F,
			0x607440,
			0x607468,
			0x6074E7,
			0x607E60,
			0x6080B2,
			0x608147,
			0x609A31,
			0x609C98,
			0x60A4A8,
			0x60BB1B,
			0x60BB40,
			0x60BE10,
			0x60C3F1,
			0x60C724,
			0x60C733,
			0x60C7AE,
			0x60C7DE,
			0x60C7E6,
			0x60E8A9,
			0x60E8C8,
			0x60E9BC,
			0x60FD11,
			0x60FD32,
			0x60FE84,
			0x60FEF5,
			0x60FFAF,
			0x60FFD6,
			0x61043F,
			0x610447,
			0x61044F,
			0x610457,
			0x61045F,
			0x610467,
			0x61046E,
			0x610476,
			0x61047E,
			0x610486,
			0x61048E,
			0x610496,
			0x61049E,
			0x6104A6,
			0x6104AE,
			0x6104B6,
			0x6104C1,
			0x6104C9,
			0x6104D1,
			0x6104D9,
			0x6104E1,
			0x6104E9,
			0x6104F1,
			0x6104F9,
			0x610501,
			0x610509,
			0x610511,
			0x610519,
			0x610521,
			0x610529,
			0x610531,
			0x610539,
			0x610547,
			0x610552,
			0x61055D,
			0x610568,
			0x610573,
			0x61057E,
			0x610589,
			0x610594,
			0x61059F,
			0x6105AA,
			0x6105B5,
			0x6105F2,
			0x61063C,
			0x610659,
			0x610675,
			0x6106B0,
			0x6106BB,
			0x61070E,
			0x610789,
			0x610791,
			0x61080A,
			0x610815,
			0x61086E,
			0x61088B,
			0x6108A8,
			0x6108C5,
			0x6108E2,
			0x6108FF,
			0x61091B,
			0x610984,
			0x6109AF,
			0x6109B5,
			0x610ACB,
			0x610AD3,
			0x611B05,
			0x611DF5,
			0x612A50,
			0x612A60,
			0x614499,
			0x6145C5,
			0x614CA2,
			0x614CBE,
			0x61521F,
			0x6152EC,
			0x6152FA,
			0x61530B,
			0x61F5E9,
			0x64BE40,
			0x650AF6,
			0x650B76,
			0x650BF6,
			0x650D4B,
			0x650D66,
			0x650D76,
			0x650D8B,
			0x650F47,
			0x6510A6,
			0x65132E,
			0x651347,
			0x651424,
			0x651432,
			0x65148B,
			0x6514C4,
			0x6514D2,
			0x6514F6,
			0x65153A,
			0x651566,
			0x6515A6,
			0x651653,
			0x6516C3,
			0x6516F3,
			0x651873,
			0x651896,
			0x651ABB,
			0x651B03,
			0x651C5B,
			0x651D93,
			0x68187C,

			// j_free
			0x4FB99B,
			0x5F717B,
			0x5F7197,
			0x5F71BE,
			0x5F72FF,
			0x5F7319,
			0x5F7364,
			0x5F737C,
			0x5F797A,
			0x5F7ABC,
			0x5F7C81,
			0x602565,
			0x602581,
			0x6025E3,
			0x62276D,
			0x62BF20,
			0x631C40,
			0x63A493,
			0x63A4C5,
			0x63A56F,
			0x63A616,
			0x63AAD3,
			0x63AAE6,
			0x63AAF9,
			0x63AB0C,
			0x63AB1F,
			0x63AB32,
			0x63AB41,
			0x63AB4D,
			0x63AB60,
			0x63AD77,
			0x63ADF6,
			0x63B093,
			0x63B0A6,
			0x63B0B9,
			0x63B0CC,
			0x63B0DF,
			0x63B0F2,
			0x63B105,
			0x63B118,
			0x63B12B,
			0x63B13E,
			0x63B151,
			0x63B164,
			0x63B177,
			0x63B18A,
			0x63B19D,
			0x63B1B0,
			0x63B1C3,
			0x63B1D6,
			0x63B1E9,
			0x63B1FC,
			0x63B20F,
			0x63B222,
			0x63B753,
			0x63B766,
			0x63B779,
			0x63B78C,
			0x64F209,
			0x64F21D,
			0x64F231,
	};
	for (auto& addr : freeAddresses) {
		NyaHookLib::PatchRelative(NyaHookLib::CALL, addr, &freeHooked);
	}
	NyaHookLib::PatchRelative(NyaHookLib::JMP, 0x6389A1, &freeHooked);

	uintptr_t reallocAddresses[] = {
			0x4023A8,
			0x402590,
			0x41DF1C,
			0x426609,
			0x42E16E,
			0x42E1AC,
			0x42E1E5,
			0x42E220,
			0x42EB42,
			0x42EBF3,
			0x42F416,
			0x42FB67,
			0x42FBCA,
			0x4309A8,
			0x431232,
			0x431F34,
			0x431FD4,
			0x4322CB,
			0x433434,
			0x433642,
			0x434871,
			0x436ACD,
			0x43CDBE,
			0x43CE64,
			0x43CEC6,
			0x43F108,
			0x43F1FA,
			0x448EFF,
			0x448FC1,
			0x450EDB,
			0x458B58,
			0x45DB05,
			0x45DB72,
			0x466CFE,
			0x466D27,
			0x466D59,
			0x466EB2,
			0x466EFF,
			0x466F7C,
			0x47057B,
			0x4705AD,
			0x476B88,
			0x476C54,
			0x476CC9,
			0x479DE5,
			0x483A52,
			0x4851A7,
			0x4A564B,
			0x4AED11,
			0x4AED61,
			0x4B1AF4,
			0x4B62D1,
			0x4B6653,
			0x4B69E4,
			0x4C7ED3,
			0x4CE4DD,
			0x4CE5F4,
			0x4CE93B,
			0x4CEAAB,
			0x4CED2F,
			0x4CEE9F,
			0x4D1489,
			0x4D14EA,
			0x4D5983,
			0x4D6B12,
			0x4DA159,
			0x4DB217,
			0x4DB2B7,
			0x4DB3CF,
			0x4DB4DB,
			0x4E2C64,
			0x4EADBD,
			0x4EADDF,
			0x51326F,
			0x51BDFD,
			0x537CA1,
			0x53806A,
			0x5380F9,
			0x5391B4,
			0x539557,
			0x543E59,
			0x54C7D2,
			0x553C11,
			0x553F8A,
			0x5542FB,
			0x5545DB,
			0x554822,
			0x5560AB,
			0x5562D8,
			0x556558,
			0x5597AD,
			0x55A0FC,
			0x56037A,
			0x565A33,
			0x565A75,
			0x565AA9,
			0x565ADD,
			0x56623A,
			0x569DEA,
			0x56A2B6,
			0x56C976,
			0x56CA1F,
			0x56CBFA,
			0x56CD6C,
			0x57BD64,
			0x57C0FD,
			0x58DC04,
			0x5925F7,
			0x592DA8,
			0x592FEE,
			0x593076,
			0x5939A0,
			0x593FCC,
			0x594B9C,
			0x5959B1,
			0x595C58,
			0x59714A,
			0x59729A,
			0x5974C4,
			0x59769B,
			0x599846,
			0x599892,
			0x5998DE,
			0x59992A,
			0x599976,
			0x5999C2,
			0x599A08,
			0x59A73D,
			0x5AC6CA,
			0x5E40F0,
			0x5FFACC,
			0x5FFAE1,
			0x61524F,
			0x615279,
			0x61F5DB,
			0x64F417,
			0x64F444,
			0x64F474,
			0x64FC74,
			0x6500F4,
			0x650157,
			0x650527,
			0x681880,
	};
	for (auto& addr : reallocAddresses) {
		NyaHookLib::PatchRelative(NyaHookLib::CALL, addr, &reallocHooked);
	}
}